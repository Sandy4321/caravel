#!/usr/bin/python
# -*- coding: utf-8 -*-
import argparse
import sys
from language import read_truth_file, read_answers_file

from scoring import calc_auc, calc_cat1, search_answer_files,\
    search_commits, search_one, test_ensembles


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-a', '--answer-file', help="read scores from here")
    parser.add_argument('-t', '--truth-file', help="find ground truth here")
    parser.add_argument('-p', '--answer-file-pattern',
                        help="read scores from files matching this pattern")
    parser.add_argument('-s', '--search', action="store_true",
                        help="search for good c@1 settings.")
    parser.add_argument('-S', '--search-commits-only', action="store_true",
                        help="print good commit IDs")
    parser.add_argument('-v', '--verbose', action="store_true",
                        help="print more")
    parser.add_argument('-e', '--epoch-from-filename', action="store_true",
                        help=("if the basename has a number, "
                              "disambiguate commits with it"))
    parser.add_argument('-E', '--test-ensembles', type=int,
                        help="test ensembles of this size")
    parser.add_argument('--randomise', action="store_true",
                        help="use random sample in ensembles")

    args = parser.parse_args()
    truth = read_truth_file(args.truth_file)

    if args.answer_file_pattern:
        if args.search_commits_only:
            search_commits(args.answer_file_pattern, truth=truth,
                           epoch_from_filename=args.epoch_from_filename)
        elif args.test_ensembles:
            test_ensembles(args.answer_file_pattern,
                           args.test_ensembles, truth=truth,
                           randomise=args.randomise,
                           epoch_from_filename=args.epoch_from_filename)
        else:
            search_answer_files(args.answer_file_pattern, truth=truth,
                                epoch_from_filename=args.epoch_from_filename)
        sys.exit()

    answers = read_answers_file(args.answer_file)

    auc = calc_auc(answers, truth)
    cat1 = calc_cat1(answers, truth)

    score = auc * cat1
    if args.verbose:
        print "AUC %.3f c@1 %.3f product %.3f" % (auc, cat1, score)

    if args.search:
        search_one(answers, truth)


main()
