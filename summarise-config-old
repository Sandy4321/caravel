#!/usr/bin/python
import sys
import subprocess

# presynaptic noise was broken until c34d2535
def does_psn_work(commit_id):
    s = subprocess.check_output(['git', 'rev-list', '--count',
                                 'c34d25351..%s' % commit_id])
    return int(s)


# entirely unsafe!
def parse_config_snippets(fn, lang_code, out=sys.stdout):
    f = open(fn)
    config = {}
    state = 'expecting commit id or space'
    python_lines = []
    for line in f:
        if state == 'expecting commit id or space':
            line = line.strip()
            if not line:
                continue
            commit = line
            psn_works = does_psn_work(commit)
            state = 'expecting python lines'
            countdown = 21
        elif state == 'expecting python lines':
            python_lines.append(line)
            countdown -= 1
            if countdown == 0:
                state = 'expecting space'
        elif state == 'expecting space':
            if line.strip():
                raise ValueError("%s, got %s" % (state, line))
            exec ''.join(python_lines)
            args = CMD + CONFIG[lang_code]
            if not psn_works:
                for x in args:
                    if x.startswith('--presynaptic-noise'):
                        args.remove(x)
                        break
            config[commit] = args
            state = 'expecting commit id or space'
        else:
            raise RuntimeError("somehow we got in state %s" % state)

    good_configs = {}  # dedup by reversing key and value
    for k, v in config.items():
        v2 = v[3:]
        try:
            m = v2.index('--control-corpus')
            del v2[m:m + 2]
        except ValueError, e:
            #print >> sys.stderr, v2, e
            v2.append('<NO-CONTROL>')
        m = v2.index('-M')
        del v2[m:m + 2]
        # --presynaptic noise was ignored early on, default was 0.1
        for x in ('-r8', '--pan-hedge=0.0', '--try-swapping-texts',
                  '--activation=2', '--learning-method=4',
                  '--ignore-start=10', '--batch-size=40'):
            if x in v2:
                v2.remove(x)
        good_configs[tuple(v2)] = k
    for config, commit in good_configs.items():
        print >>out, commit, ' '.join(config)


def main(args):
    LANG_CONFIG = [
        ('spanish', 'SP'),
        ('english', 'EN'),
        ('greek', 'GR'),
        ('dutch', 'DU'),
    ]
    for lang, code in LANG_CONFIG:
        if args and lang not in args:
            continue
        print lang
        fn = "results/%s-best.txt" % lang
        outfn = "results/%s-config.txt" % lang
        subprocess.check_call(["./pick-out-good-config.sh",
                               lang, fn])

        f = open(outfn, 'w')
        parse_config_snippets(fn, code, f)
        f.close()
main(sys.argv[1:])
