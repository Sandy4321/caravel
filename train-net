#!/usr/bin/python
import argparse
import os
import sys
import charmodel
import random
import itertools
import re
import json
from language import load_texts, always
import mappings


def get_alphabet(texts):
    text = ''.join(''.join(x) for x in texts)
    a = charmodel.Alphabet(text, ignore_case=False, threshold=1e-9)
    print >>sys.stderr, "alphabet is %s" % (a.alphabet,)
    return a


def encode_and_cycle_texts(alphabet, texts):
    print >>sys.stderr, "remapping texts"
    return {k: itertools.cycle(alphabet.encode_text(x) for x in v)
            for k, v in texts.items()}


def get_net_and_corpus(srcdir, remap, accept_fn, **kwargs):
    raw_texts = load_texts(srcdir, remap, accept_fn)
    alphabet = get_alphabet(raw_texts.values())
    textnames = sorted(raw_texts.keys())

    metadata = json.dumps({
        'alphabet': alphabet.alphabet,
        'collapse_chars': alphabet.collapsed_chars,
        'version': 1,
        'classnames': textnames,
        'case_insensitive': False,
        'utf8': True,
        'collapse_space': False,
    }, sort_keys=True)

    net = charmodel.Net(alphabet, textnames, metadata=metadata, **kwargs)
    texts = encode_and_cycle_texts(alphabet, raw_texts)
    return net, texts


def train(net, texts, leakage, sub_epochs, leakage_decay, learn_rate_decay,
          ignore_start):

    validation_texts = [(k, v.next()) for k, v in texts.items()[:5]]

    for i in range(sub_epochs):
        print ("doing sub-epoch %d with learn-rate %s, "
               "leakage %s" % (i, net.learn_rate, leakage))

        for name, cycle in texts.items():
            net.train(cycle.next(), name, leakage=leakage,
                      ignore_start=ignore_start)

        for name, text in validation_texts:
            entropies = net.test(text, ignore_start)
            own_e, mean_e = (entropies[name],
                             sum(entropies.values()) / len(entropies))
            print ("%s own %.3f mean %.3f diff %.3f" %
                   (name, own_e, mean_e, mean_e - own_e))

        net.save()
        leakage *= leakage_decay
        net.learn_rate *= learn_rate_decay


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('srcdir', help="find training text here")
    parser.add_argument('destdir', help="write results here")
    parser.add_argument('-n', '--basename',
                        help="base filenames upon this")
    parser.add_argument('-H', '--hidden-size', type=int, default=199, metavar='<nodes>',
                        help="number of hidden nodes")
    parser.add_argument('-r', '--rng-seed', type=int, default=-1,
                        help="rng seed (-1 for auto)")
    parser.add_argument('-e', '--sub-epochs', type=int, default=1,
                        help="how many cycles through the texts to do")
    parser.add_argument('--batch-size', type=int, default=20, metavar='<int>',
                        help="mini-batch size")
    parser.add_argument('--presynaptic-noise', type=float, default=0, metavar='<float>',
                        help="Add this much presynaptic noise")
    parser.add_argument('-l', '--learn-rate', type=float, default=1e-3,
                        help=charmodel.Net.learn_rate.__doc__)
    parser.add_argument('-L', '--leakage', type=float, default=-1,
                        help=("how much training leaks into other classes "
                              "[0-1] or negative"))
    parser.add_argument('--leakage-decay', type=float, default=1,
                        help="change in leakage per sub-epoch")
    parser.add_argument('--learn-rate-decay', type=float, default=1,
                        help="change in learn-rate per sub-epoch")
    parser.add_argument('-m', '--momentum', type=float, default=0.95, metavar='<0-1>',
                        help=charmodel.Net.momentum.__doc__)
    parser.add_argument('--momentum-weight', type=float, default=0.5, metavar='<0-1>',
                        help=charmodel.Net.momentum_weight.__doc__)
    parser.add_argument('--log-file', default=None,
                        help="log to this file")
    parser.add_argument('-v', '--verbose', action='store_true',
                        help="print more to stderr")
    parser.add_argument('--enable-fp-exceptions', action='store_true',
                        help="crash on bad floating point errors")
    parser.add_argument('--temporal-pgm-dump', action='store_true',
                        help=("save images showing changing state "
                              "of input/error vectors"))
    parser.add_argument('--periodic-pgm-dump',
                        metavar='"({ih,ho,bi}{w,m,d,t})*"',
                        help=("Periodically dump images of weights;"
                              "string determines which"))
    parser.add_argument('--periodic-pgm-period', type=int, default=10000,
                        help=("periodicity of periodic-pgm-dump"))
    parser.add_argument('--accept_re', metavar='REGEXP',
                        help="only use classes matching this pattern")
    parser.add_argument('--learning-method', type=int, default=4,
                        help=("0: weighted, 2: simplified N., "
                              "3: classical, 4: adagrad"))
    parser.add_argument('--activation', type=int, default=2,
                        help=("1: ReLU, 2: ReSQRT, 3: ReLOG, 4: "
                              "ReTANH, 5: clipped ReLU"))
    parser.add_argument('-d', '--bptt-depth', type=int, default=50,
                        help="how far to backpropagate through time")
    parser.add_argument('-i', '--ignore-start', type=int, default=0,
                        help="don't train on this many characters at start")
    parser.add_argument('-M', '--language-mapping',
                        help="use this character mapping")
    parser.add_argument('-f', '--filename',
                        help="save net here")

    args = parser.parse_args()

    if args.enable_fp_exceptions:
        charmodel.enable_fp_exceptions()

    if args.rng_seed != -1:
        random.seed(args.rng_seed)

    if args.accept_re:
        accept_fn = re.compile(args.accept_re).search
    else:
        accept_fn = always

    remap = mappings.get_charmap(args.language_mapping)

    net_kwargs = {}
    for k, v in vars(args).items():
        if k in ("bptt_depth",
                "hidden_size",
                 "rng_seed",
                 "log_file",
                 "verbose",
                 "learn_rate",
                 "temporal_pgm_dump",
                 "periodic_pgm_dump",
                 "periodic_pgm_period",
                 "basename",
                 "activation",
                 "learning_method",
                 "batch_size",
                 "filename"):
            net_kwargs[k] = v

    net, texts = get_net_and_corpus(args.srcdir, remap, accept_fn,
                                    **net_kwargs)

    train(net, texts, args.leakage, args.sub_epochs, args.leakage_decay,
          args.learn_rate_decay, args.ignore_start)

main()
