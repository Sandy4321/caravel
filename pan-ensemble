#!/usr/bin/python
import argparse
import os
import sys
import subprocess
from language import guess_directory_lang
from pan import write_answers, balance_results
import time
import random

HERE = os.path.dirname(__file__)

CMD = ('./train-net --ignore-start=10 --raw-answers=-  --batch-size=40 '
       ' -d70 --try-swapping-texts -n pan  --learning-method=4 '
       '--pan-hedge=0.0 ').split()

CAT1_SETTINGS = {
    'DU' : (None, 0.0),
    'GR' : (None, 0.03),
    'EN' : (None, 0.03),
    'SP' : (None, 0.04),
}

def get_commands(lang, input_dir):
    commands = []
    f = open('config/%s-common' % lang)
    cmd = CMD + f.read().split()
    f.close()
    f = open('config/%s' % lang)
    for line in f:
        line = line.strip()
        if line and not line[0] == '#':
            commands.append(cmd + line.split() + [input_dir])
    return commands


def aggregate_results(commands, timeout=None, raw_answers=''):
    results = {}
    if timeout is not None:
        start = time.time()
        end = start + timeout * 3600

    for i, command in enumerate(commands):
        try:
            print >> sys.stderr, "%d running %s" % (i, ' '.join(command))
            r = subprocess.check_output(command).strip()
        except subprocess.CalledProcessError, e:
            print >> sys.stderr, e
            continue
        if raw_answers:
            f = open(raw_answers % i, 'w')
            f.write(r)
            f.close()
        for line in r.split('\n'):
            k, v = line.split()
            results.setdefault(k, []).append(float(v))
        if timeout is not None and time.time() > end:
            print >> sys.stderr, ("stopping after %.1f hours" %
                                  ((time.time() - start) / 3600.0,))
            break

    aggregated = {}
    for k, v in results.items():
        aggregated[k] = sum(v) / len(v)
    return aggregated


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input-dir', help="find testing corpus here")
    parser.add_argument('-o', '--output-dir', help="write results here")
    parser.add_argument('-t', '--timeout', type=float, default=10.0,
                        help="stop soon after this many hours")
    parser.add_argument('-r', '--randomise', action="store_true",
                        help="shuffle the ensemble (meaningful with --timeout)")
    parser.add_argument('--write-raw-answers', action="store_true",
                        help="write raw answers for each member")

    args = parser.parse_args()

    lang = guess_directory_lang(args.input_dir)
    print >> sys.stderr, "using %s config" % lang

    commands = get_commands(lang, args.input_dir)
    if args.randomise:
        random.shuffle(commands)

    if args.write_raw_answers:
        raw_answers = os.path.join(args.output_dir, "raw-answers-%s.txt")
    else:
        raw_answers = None

    results = aggregate_results(commands, args.timeout, raw_answers)

    if args.write_raw_answers:
        write_answers(raw_answers % 'ensemble', results)

    cat1_settings = CAT1_SETTINGS[lang]
    balanced_results = balance_results(results, *cat1_settings)

    fn = os.path.join(args.output_dir, "answers.txt")
    write_answers(fn, balanced_results)

main()
